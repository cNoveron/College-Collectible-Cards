{"version":3,"sources":["drizzleOptions.js","layouts/components/Title.jsx","layouts/components/DataTable.jsx","layouts/home/CardViewer.jsx","layouts/components/Balance.jsx","layouts/components/ContractForm.jsx","layouts/home/CardCreator.jsx","App.js","serviceWorker.js","index.js"],"names":["options","web3","block","fallback","type","url","contracts","events","polls","accounts","Title","react_default","a","createElement","className","style","backgroundColor","color","fontFamily","Component","ContractData","newContextComponents","DataTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","table","width","border","borderRadius","overflow","tableRow","background","padding","fontWeight","tableData","_1st","_2nd","tableHeader","_this2","_","range","map","index","key","drizzle","drizzleState","contract","method","methodArgs","tokenId","toUtf8","components_DataTable","drizzle_react","Consumer","drizzleContext","initialized","DataTable_DataTable","CardSelector","state","componentDidMount","bind","assertThisInitialized","changeCard","designURL","React","createRef","unsubscribe","store","subscribe","getState","drizzleStatus","setState","prevState","objectSpread","event","value","target","designRef","current","dataKey","htmlFor","id","onChange","CardViewer_ContractData","ref","src","alt","CardViewer","CardViewer_CardSelector","tinycolor","require","Balance","address","display","fontSize","balance","boxShadow","currentAccount","prevProps","mostReadable","substring","includeFallbackColors","toString","isEmpty","Balance_ContractData","tokenContract","components_Balance","Balance_Balance","ContractForm","handleInputChange","handleSubmit","abi","inputs","initialState","i","length","name","j","test","_this$contracts$this$2","preventDefault","_this$contracts$this$","convertedInputs","input","size","getSize","isBytes","emptyArray","subindex","subinputName","subinputInState","utils","toHex","sendArgs","methods","cacheSend","apply","toConsumableArray","concat","_this3","abiName","exec","newArray","defineProperty","parseInt","_this4","onSubmit","getHTMLType","inputLabel","labels","suffix","placeholder","onClick","CardCreator","readOnly","components_ContractForm","toWei","home_CardCreator","CardCreator_CardCreator","App","drizzleStore","generateStore","drizzleOptions","Drizzle","Provider","Title_Title","react_router_dom","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f79098d4.chunk.js","sourcesContent":["import AthleteToken from \"./contracts/AthleteToken.json\";\r\nimport CollectiblesCrowdsale from \"./contracts/CollectiblesCrowdsale.json\";\r\n// import Ganache from \"ganache-core\"\r\n\r\nconst options = {\r\n  web3: {\r\n    // customProvider: Ganache.provider({\r\n    //   gasLimit: 7000000\r\n    // }),\r\n    block: false,\r\n    fallback: {\r\n      type: \"ws\",\r\n      url: \"ws://127.0.0.1:7545\",\r\n    },\r\n  },\r\n  contracts: [AthleteToken, CollectiblesCrowdsale],\r\n  events: {\r\n  },\r\n  polls: {\r\n    accounts: 10,\r\n  },\r\n};\r\n\r\nexport default options;\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Title extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className='pure-u-1 header'\r\n        style={{\r\n          backgroundColor: '#000',\r\n          color: '#fff',\r\n          fontFamily: 'inherit'\r\n        }}\r\n      >\r\n        <h1>FAIR SHARE E-CARDS</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { DrizzleContext } from 'drizzle-react'\r\nimport { newContextComponents } from 'drizzle-react-components';\r\n\r\nimport _ from 'lodash'\r\n\r\nconst { ContractData } = newContextComponents;\r\n\r\nclass DataTable extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.style = {\r\n      table: {\r\n        width: '100%',\r\n        border: 'none',\r\n        borderRadius: '10px',\r\n        overflow: 'hidden',\r\n      },\r\n      tableRow: {\r\n        background: '#000',\r\n        color: '#fff',\r\n        padding: '2px',\r\n        fontWeight: 'bold',\r\n      },\r\n      tableData: {\r\n        _1st: { width: '80%' },\r\n        _2nd: { width: '50%' },\r\n      },\r\n      tableHeader: {\r\n        background: '#777'\r\n      },\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table\r\n          className='pure-table'\r\n          style={this.style.table}\r\n        >\r\n          <tbody>\r\n            <tr style={this.style.tableRow}>\r\n              <th style={this.style.tableHeader}>\r\n                <div>Field</div>\r\n              </th>\r\n              <th style={this.style.tableHeader}>\r\n                <div>Value</div>\r\n              </th>\r\n            </tr>\r\n              {_.range(6)\r\n                .map(\r\n                  index => {\r\n                    let array = [\r\n                      'playerName',\r\n                      'birthPlace',\r\n                      'birthDate',\r\n                      'heightCm',\r\n                      'weightKg',\r\n                      'college'\r\n                    ]\r\n                    return (\r\n                      <tr key={index} style={this.style.tableRow}>\r\n                        <td style={this.style.tableData}>{array[index]}</td>\r\n                        <td style={this.style.tableData._2nd}>\r\n                          <div>\r\n                            <ContractData\r\n                              drizzle={this.props.drizzle}\r\n                              drizzleState={this.props.drizzleState}\r\n                              contract={'AthleteToken'}\r\n                              method={'playerData'}\r\n                              methodArgs={[\r\n                                this.props.tokenId,\r\n                                index\r\n                              ]}\r\n                              toUtf8\r\n                            />\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                  }\r\n                )\r\n              }\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        \r\n        <table\r\n          className='pure-table'\r\n          style={this.style.table}\r\n        >\r\n          <tbody>\r\n            <tr style={this.style.tableRow}>\r\n              <th style={this.style.tableHeader}>\r\n                <div>Field</div>\r\n              </th>\r\n              <th style={this.style.tableHeader}>\r\n                <div>Value</div>\r\n              </th>\r\n            </tr>\r\n              {_.range(11)\r\n                .map(\r\n                  index => {\r\n                    let array = [\r\n                      'gamesPlayed',\r\n                      'gamesStarted',\r\n                      'minutesPerGame',\r\n                      'fieldGoalPercentage',\r\n                      'threPointFieldGoalPercentage',\r\n                      'freeThrowPercentage',\r\n                      'reboundsPerGame',\r\n                      'assistsPerGame',\r\n                      'stealsPerGame',\r\n                      'blocksPerGame',\r\n                      'pointsPerGame'\r\n                    ]\r\n                    return (\r\n                      <tr key={index} style={this.style.tableRow}>\r\n                        <td style={this.style.tableData._1st}>{array[index]}</td>\r\n                        <td style={this.style.tableData}>\r\n                          <div>\r\n                            <ContractData\r\n                              drizzle={this.props.drizzle}\r\n                              drizzleState={this.props.drizzleState}\r\n                              contract={'AthleteToken'}\r\n                              method={'basketballStats'}\r\n                              methodArgs={[\r\n                                this.props.tokenId,\r\n                                index\r\n                              ]}\r\n                            />\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                  }\r\n                )\r\n              }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default (props) => (\r\n  <DrizzleContext.Consumer>\r\n    {drizzleContext => {\r\n      const { drizzle, drizzleState, initialized } = drizzleContext;\r\n      if (!initialized) {\r\n        return 'Loading...';\r\n      }\r\n      return (\r\n        <DataTable\r\n          drizzle={drizzle}\r\n          drizzleState={drizzleState}\r\n          tokenId={props.tokenId}\r\n        />\r\n      )\r\n    }}\r\n  </DrizzleContext.Consumer>\r\n)\r\n","import React, { Component } from 'react'\r\nimport { DrizzleContext } from 'drizzle-react'\r\nimport { newContextComponents } from 'drizzle-react-components';\r\n\r\nimport DataTable from '../components/DataTable';\r\n\r\nconst { ContractData } = newContextComponents;\r\n\r\nclass CardSelector extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      drizzle: props.drizzle,\r\n      drizzleState: props.drizzleState,\r\n      initialized: false,\r\n      tokenId: 0,\r\n    }\r\n    this.accounts = this.state.drizzleState.accounts\r\n    this.componentDidMount = this.componentDidMount.bind(this)\r\n    this.changeCard = this.changeCard.bind(this)\r\n    this.designURL = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    var CardSelector = this\r\n    this.unsubscribe = this.props.drizzle.store.subscribe(function () {\r\n      /**\r\n      * It's important to refresh drizzleState by calling this method\r\n      * from drizzle.store, otherwise, even though a change is observed\r\n      * in drizzle.store drizzleState will remain the same.\r\n     */\r\n      var drizzle = CardSelector.state.drizzle\r\n      var drizzleState = drizzle.store.getState()\r\n      if (drizzleState.drizzleStatus.initialized) {\r\n        CardSelector.setState((state, prevState) => {\r\n          return {\r\n            drizzle: drizzle,\r\n            drizzleState: drizzleState,\r\n            initialized: true,\r\n            ...prevState\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe()\r\n  }\r\n\r\n  changeCard(event) {\r\n    const { value } = event.target\r\n    this.setState({\r\n      tokenId: value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let designRef = this.designURL.current\r\n    let dataKey = !designRef || designRef == null ? '' : designRef.state.dataKey\r\n    let designURL = !dataKey ? '' : designRef.props.drizzleState.contracts['AthleteToken']['designURL'][dataKey]\r\n    return (\r\n      <div className=\"pure-g\" style={{ backgroundColor: '#f50' }}>\r\n        <div className='pure-u-1'>\r\n          \r\n          <div className='pure-u-1-2'>\r\n            <div className='container'>\r\n\r\n              <h2>Visualize Fair Share eCard by ID</h2>\r\n\r\n              <form\r\n                className='pure-form'\r\n                style={{ width: '100%' }}\r\n              >\r\n                <fieldset>\r\n                  <label htmlFor='selectedCard'>\r\n                    <strong>Select card by ID: </strong>\r\n                  </label>\r\n\r\n                  <input\r\n                    id='selectedCard'\r\n                    type='number'\r\n                    value={this.state.tokenId}\r\n                    onChange={this.changeCard}\r\n                  />\r\n                  <br />\r\n                </fieldset>\r\n              </form>\r\n\r\n              <DataTable\r\n                tokenId={this.state.tokenId}\r\n              />\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div className='pure-u-1-2'>\r\n            <div className='container'>\r\n              <div>\r\n                <ContractData\r\n                  drizzle={this.props.drizzle}\r\n                  drizzleState={this.props.drizzleState}\r\n                  contract={'AthleteToken'}\r\n                  method={'designURL'}\r\n                  methodArgs={[this.state.tokenId]}\r\n                  ref={this.designURL}\r\n                />\r\n              </div>\r\n              <div>\r\n                <img\r\n                  src={\r\n                    !designRef || designRef == null ? '' :\r\n                      !designURL ? '' :\r\n                        designURL.value\r\n                  }\r\n                  alt={'Loading card design...'}\r\n                  style={{ width: '100%' }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default () => (\r\n  <DrizzleContext.Consumer>\r\n    {drizzleContext => {\r\n      const { drizzle, drizzleState, initialized } = drizzleContext;\r\n      if (!initialized) {\r\n        return 'Loading...';\r\n      }\r\n      return (\r\n        <CardSelector\r\n          drizzle={drizzle}\r\n          drizzleState={drizzleState}\r\n        />\r\n      )\r\n    }}\r\n  </DrizzleContext.Consumer>\r\n)","import React, { Component } from 'react'\r\nimport { DrizzleContext } from 'drizzle-react'\r\nimport _ from 'lodash'\r\n\r\n// Components\r\nimport { newContextComponents } from 'drizzle-react-components'\r\n\r\nconst { ContractData } = newContextComponents;\r\n\r\nvar tinycolor = require(\"tinycolor2\");\r\nclass Balance extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      address: {\r\n        color: '#000',\r\n        display: 'inline',\r\n        fontSize: '12px',\r\n      },\r\n      balance: {\r\n        color: 'white',\r\n        backgroundColor: '#000',\r\n        borderRadius: '4px',\r\n        boxShadow: 'inset 1px 1px 4px #333',\r\n        fontWeight: 'bold',\r\n        padding: '3px 7px',\r\n      },\r\n      tableRow: {\r\n        backgroundColor: '#eee',\r\n      },\r\n      tableData: {\r\n        width: '50%',\r\n        padding: '2px'\r\n      },\r\n      currentAccount: props.currentAccount,\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props !== prevProps) {\r\n      this.setState({\r\n        address: {\r\n          ...prevState.address,\r\n          color: tinycolor.mostReadable(\r\n            '#eee',\r\n            [this.props.currentAccount.substring(2, 8)],\r\n            { includeFallbackColors: true }\r\n          ).toString(),\r\n        },\r\n        balance: {\r\n          ...prevState.balance,\r\n          backgroundColor: tinycolor(this.props.currentAccount.substring(9, 15)).toString(),\r\n        },\r\n        currentAccount: this.props.currentAccount,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (_.isEmpty(this.props.currentAccount))\r\n      return (\r\n        <div>\r\n          503 - Service unavailable - !this.props.currentAccount\r\n        </div>\r\n      )\r\n    else {\r\n      return (\r\n        <div style={this.state.tableRow}>\r\n          <div style={this.state.tableData}>\r\n            balanceOf:{' '}\r\n            <strong style={this.state.address}>\r\n              {this.props.currentAccount}\r\n            </strong>{' '}\r\n          </div>\r\n          <div style={this.state.tableData}>\r\n            <div style={this.state.balance}>\r\n              <ContractData\r\n                drizzle={this.props.drizzle}\r\n                drizzleState={this.props.drizzleState}\r\n                contract={this.props.tokenContract}\r\n                method=\"balanceOf\"\r\n                methodArgs={[this.props.currentAccount]}\r\n              />{' Fair Share eCards'}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default (props) => (\r\n  <DrizzleContext.Consumer>\r\n    {drizzleContext => {\r\n      const { drizzle, drizzleState, initialized } = drizzleContext;\r\n      if (!initialized || !drizzleState.accounts[props.index]) {\r\n        return 'Loading...';\r\n      }\r\n      return (\r\n        <Balance\r\n          drizzle={drizzle}\r\n          drizzleState={drizzleState}\r\n          currentAccount={drizzleState.accounts[props.index]}\r\n          tokenContract={props.tokenContract}\r\n        />\r\n      )\r\n    }}\r\n  </DrizzleContext.Consumer >\r\n)","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport _ from 'lodash'\r\n\r\nclass ContractForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    this.contracts = props.drizzle.contracts;\r\n\r\n    // Get the contract ABI\r\n    const abi = this.contracts[this.props.contract].abi;\r\n\r\n    this.inputs = [];\r\n    var initialState = {};\r\n\r\n    // Iterate over abi for correct function.\r\n    for (var i = 0; i < abi.length; i++) {\r\n      if (abi[i].name === this.props.method) {\r\n        this.inputs = abi[i].inputs;\r\n\r\n        for (var j = 0; j < this.inputs.length; j++) {\r\n          initialState[this.inputs[j].name] =\r\n            /[a-z]+[0-9]*\\[[0-9]+\\]/.test(this.inputs[j].type) ? [] : \"\";\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.state = initialState;\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const convertedInputs = this.inputs.map((input, index) => {\r\n      var size = this.getSize(input.type);\r\n      let isArray = 1 < size\r\n      if (isArray) {\r\n        let isBytes = /^bytes/.test(input.type)\r\n        let emptyArray = _.range(size)\r\n        let convertedArray = _.map(emptyArray, subindex => {\r\n          let subinputName = input.name\r\n          let subinputInState = this.state[subinputName][subindex]\r\n          return isBytes ? this.props.drizzle.web3.utils.toHex(subinputInState) : subinputInState\r\n        })\r\n        return convertedArray\r\n      }\r\n      else if (/^bytes/.test(input.type)) {\r\n        return this.props.drizzle.web3.utils.toHex(this.state[input.name])\r\n      }\r\n      return this.state[input.name];\r\n    })\r\n\r\n    if (this.props.sendArgs) {\r\n      return this.contracts[this.props.contract].methods[\r\n        this.props.method\r\n      ].cacheSend(...convertedInputs, this.props.sendArgs);\r\n    }\r\n\r\n    return this.contracts[this.props.contract].methods[\r\n      this.props.method\r\n    ].cacheSend(...convertedInputs);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    let target = event.target\r\n    let name = target.name\r\n    let value = target.value\r\n    let isArray = /[a-z]+[0-9]*\\[[0-9]+\\]/.test(name)\r\n    if (isArray) {\r\n      let abiName = /([^)]+)\\[[0-9]+\\]/.exec(name)[1]\r\n      this.setState((prevState, state) => {\r\n        let newArray = this.state[abiName]\r\n        newArray[this.getSize(name)] = value\r\n        return {\r\n          [abiName]: newArray\r\n        }\r\n      });\r\n    }\r\n    else this.setState({ [name]: value });\r\n  }\r\n\r\n  getSize(type) {\r\n    if (/[a-z]+[0-9]*\\[[0-9]+\\]/.test(type)) {\r\n      let size = /\\[([^)]+)\\]/.exec(type)[1]\r\n      return parseInt(size)\r\n    }\r\n    else return 1\r\n  }\r\n  \r\n  getHTMLType(type) {\r\n    if (/^uint/.test(type))\r\n      return \"number\"\r\n    else if (/^string/.test(type) || /^bytes/.test(type))\r\n      return \"text\"\r\n    else if (/^bool/.test(type))\r\n      return \"checkbox\"\r\n    else\r\n      return \"text\"\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"pure-form pure-form-stacked\" onSubmit={this.handleSubmit}>\r\n        {this.inputs.map((input, index) => {\r\n          var size = this.getSize(input.type);\r\n          var type = this.getHTMLType(input.type);\r\n          // if the labels props are passed, assign the corresponding label to the inputLabel\r\n          // variable that will be passed to the placeholder prop of the corresponding input\r\n          var inputLabel = this.props.labels\r\n            ? this.props.labels[index]\r\n            : input.name;\r\n          // check if input type is struct and if so loop out struct fields as well\r\n          return _.range(size).map(subindex => {\r\n            let suffix = 1 < size ? '[' + subindex + ']' : ''\r\n            return (\r\n              <input\r\n                key={input.name + suffix}\r\n                type={type}\r\n                name={input.name + suffix}\r\n                value={this.state[input.name + suffix]}\r\n                placeholder={inputLabel + suffix}\r\n                onChange={this.handleInputChange}\r\n              />\r\n            )\r\n          })\r\n        })}\r\n        <button\r\n          key=\"submit\"\r\n          className=\"pure-button\"\r\n          type=\"button\"\r\n          onClick={this.handleSubmit}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContractForm.propTypes = {\r\n  drizzle: PropTypes.object.isRequired,\r\n  contract: PropTypes.string.isRequired,\r\n  method: PropTypes.string.isRequired,\r\n  sendArgs: PropTypes.object,\r\n  labels: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default ContractForm;\r\n","import React, { Component } from 'react'\r\nimport { DrizzleContext } from 'drizzle-react'\r\n\r\nimport Balance from '../components/Balance';\r\nimport ContractForm from '../components/ContractForm';\r\nclass CardCreator extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      drizzle: props.drizzle,\r\n      drizzleState: props.drizzleState,\r\n      initialized: false,\r\n    }\r\n    // this.componentDidMount = this.componentDidMount.bind(this)\r\n  }\r\n  \r\n  componentDidMount() {\r\n    var CardCreator = this\r\n    this.unsubscribe = this.props.drizzle.store.subscribe(function () {\r\n      /**\r\n      * It's important to refresh drizzleState by calling this method\r\n      * from drizzle.store, otherwise, even though a change is observed\r\n      * in drizzle.store drizzleState will remain the same.\r\n      */\r\n      var drizzle = CardCreator.state.drizzle\r\n      var drizzleState = drizzle.store.getState() \r\n      if (drizzleState.drizzleStatus.initialized) {\r\n        CardCreator.setState({\r\n          drizzle: drizzle,\r\n          drizzleState: drizzleState,\r\n          initialized: true\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribe()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pure-g\" style={{ backgroundColor: '#f50' }}>\r\n        <div className='pure-u-1'>\r\n          <div className='pure-u-1-2'>\r\n            <div className='container'>\r\n\r\n              <h2>College Card Collectibles Token Fields</h2>\r\n\r\n              <form\r\n                className='pure-form'\r\n                style={{ width: '100%' }}\r\n              >\r\n                <fieldset>\r\n                  <label htmlFor='sendFrom'>\r\n                    <strong>Please use Metamask to select the account to send from: </strong>\r\n                  </label>\r\n                  <input\r\n                    id='sendFrom'\r\n                    type='text'\r\n                    value={this.state.drizzleState.accounts[0]}\r\n                    readOnly\r\n                  />\r\n                  <br />\r\n                </fieldset>\r\n              </form>\r\n\r\n              <ContractForm\r\n                contract='CollectiblesCrowdsale'\r\n                drizzle={this.props.drizzle}\r\n                drizzleState={this.props.drizzleState}\r\n                method='buyTokens'\r\n                sendArgs={{ value: this.props.drizzle.web3.utils.toWei('600','szabo')}}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className='pure-u-1-2'>\r\n            <div className='container'>\r\n              <Balance\r\n                drizzle={this.props.drizzle}\r\n                drizzleState={this.props.drizzleState}\r\n                index={0}\r\n                tokenContract={'AthleteToken'}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>        \r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default () => (\r\n  <DrizzleContext.Consumer>\r\n    {drizzleContext => {\r\n      const { drizzle, drizzleState, initialized } = drizzleContext;\r\n      if (!initialized) {\r\n        return \"Loading...\";\r\n      }\r\n      return (\r\n        <CardCreator\r\n          drizzle={drizzle}\r\n          drizzleState={drizzleState}\r\n        />\r\n      )\r\n    }}\r\n  </DrizzleContext.Consumer >\r\n)","import React, { Component } from 'react'\r\nimport { Drizzle, generateStore } from 'drizzle'\r\nimport { DrizzleContext } from 'drizzle-react'\r\nimport drizzleOptions from './drizzleOptions'\r\nimport { Route, NavLink, HashRouter } from \"react-router-dom\"\r\n\r\n// Layouts\r\nimport Title from './layouts/components/Title'\r\nimport CardViewer from './layouts/home/CardViewer'\r\nimport CardCreator from './layouts/home/CardCreator'\r\n\r\n// Stylesy\r\nimport './css/pure-min.css'\r\nimport './css/App.css'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    var drizzleStore = generateStore(drizzleOptions)\r\n    var drizzle = new Drizzle(drizzleOptions, drizzleStore)\r\n    return (\r\n      <DrizzleContext.Provider drizzle={drizzle}>\r\n        <Title />\r\n        <HashRouter>\r\n          <div>\r\n            <nav>\r\n              <ul className=\"header\" style={{display: 'inline-block'}}>\r\n                <li><NavLink to=\"/CardViewer\">CardViewer</NavLink></li>\r\n                <li><NavLink to=\"/CardCreator\">CardCreator</NavLink></li>\r\n              </ul>\r\n            </nav>\r\n            <div className=\"content\">\r\n              <Route exact path=\"/CardViewer\" component={CardViewer} />\r\n              <Route path=\"/CardCreator\" component={CardCreator} />\r\n            </div>\r\n          </div>\r\n        </HashRouter>\r\n      </DrizzleContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}